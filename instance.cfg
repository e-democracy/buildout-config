# Rules to set up GroupServer
[mkdirs]
recipe = z3c.recipe.mkdir
paths = parts/site-packages
        downloads
        src
        var/log
        var/instance
        log
        etc

[smtp2gs]
# Create the bin/smtp2gs scipt
#
# --=mpj17=-- Rather relying on the raw console_scripts in the setup.py for
# gs.group.messages.add egg I have created this section to create an
# *environment* for installation. This environment will be used to install
# the script with *very* few eggs. This allows the script to start up more
# quickly (saving at least 4s on my development machine).
#
# The script itself is specified in the entry_points/console_scripts of the
# egg-setup.
recipe = zc.recipe.egg
eggs = gs.group.messages.add.smtp2gs
       gs.config
       gs.form
scripts = smtp2gs
arguments = "${buildout:etc-directory}/etc/gsconfig.ini"

[senddigest]
# Create the bin/senddigest script
recipe = zc.recipe.egg
eggs = gs.group.messages.senddigest
scripts = senddigest
arguments = "${buildout:directory}/etc/gsconfig.ini"

[createtoken]
# Create the bin/gs_auth_token_create script
recipe = zc.recipe.egg
eggs = gs.auth.token
scripts = gs_auth_token_create

[instancepython]
# Create bin/instancepython version of the Python interpreter, which loads
#   the correct modules on startup.
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = instancepython
scripts = zodbconvert zodbpack paster
extra-paths = ${buildout:directory}/parts/site-packages/

[instance]
# Create the bin/instance script to start the Zope instance that runs 
# GroupServer.
recipe = plone.recipe.zope2instance
eggs = ${buildout:eggs}        
zcml = ${buildout:zope-eggs}
products = ${buildout:directory}/src
user = ${config:zope_admin}:${config:zope_password}
http-address = ${config:zope_host}:${config:zope_port}
debug-mode = off
enable-product-installation = off
extra-paths = ${buildout:directory}/parts/site-packages/
rel-storage =
  type postgresql
  dsn dbname='${config:relstorage_dbname}' user='${config:relstorage_user}' host='${config:relstorage_host}' port='${config:relstorage_port}' password='${config:relstorage_password}'

[create-tables]
# Create the tables used by GroupServer
recipe = gs.recipe.createtables
# --=mpj17=-- For those that are interested, the way buildout works is
#   as follows. The recipe (gs.recipe.setupgs) is called with all the
#   options specified in this section as arguments. A recipe can only
#   see the options in its own section, so the ${config:} construct is
#   used to share options between the sections.
database_host = ${config:pgsql_host}
database_port = ${config:pgsql_port}
database_username = ${config:pgsql_user}
database_password = ${config:pgsql_password} # Unused
database_name = ${config:pgsql_dbname}

[create-config]
# Create a GroupServer configuration
recipe = gs.recipe.config
dest = ${buildout:etc-directory}/gsconfig.ini
database_host = ${config:pgsql_host}
database_port = ${config:pgsql_port}
database_username = ${config:pgsql_user}
database_password = ${config:pgsql_password}
database_name = ${config:pgsql_dbname}
smtp_host = ${config:smtp_host}
smtp_port = ${config:smtp_port}
smtp_user = ${config:smtp_user}
smtp_password = ${config:smtp_password}

[setup-postfix]
# Create the Postfix configuration files for GroupServer
recipe = gs.recipe.postfix
smtp2gs_path = ${buildout:directory}/bin/smtp2gs
site = ${config:host}

[setup-gs]
# Create a GroupServer site in the Zope instance.
recipe = gs.recipe.setupgs
database_host = ${config:pgsql_host}
database_port = ${config:pgsql_port}
database_admin = ${config:pgsql_user}
database_username = ${config:pgsql_user}
database_password = ${config:pgsql_password}
database_name = ${config:pgsql_dbname}
gs_host = ${config:host}
gs_port = ${config:port}
gs_smtp_host = ${config:smtp_host}
gs_smtp_port = ${config:smtp_port}
gs_smtp_user = ${config:smtp_user}
gs_smtp_password = ${config:smtp_password}
gs_admin_email    = ${config:admin_email}
gs_admin_password = ${config:admin_password}
gs_user_email     = ${config:user_email}
gs_user_password  = ${config:user_password}
gs_support_email  = ${config:support_email}
gs_timezone = UTC
instance_id = groupserver
instance_title = Initial GroupServer Instance
zope_admin_name = ${config:zope_admin}
zope_admin = ${config:zope_admin}:${config:zope_password}

[finish]
recipe = collective.recipe.cmd:py
on_install = true
on_update = true
cmds =
     >>> import sys, os
     >>> def mkDestDir(destDir):
     ...    try:
     ...        os.makedirs(destDir, 0755)
     ...    except os.error, oe:
     ...        pass # Hoping the directory already exists.
     ...    else:
     ...        print 'Made the directory %s' % destDir
     >>> def symlink(path, destDir):
     ...    if os.path.exists(path):
     ...        print 'Linking %s' % path
     ...        lname = os.path.split(path)[-1]
     ...        lpath = os.path.join(destDir, lname)
     ...        if not os.path.exists(lpath):
     ...            os.symlink(path, lpath)
     >>> destDir = "parts/site-packages/"
     >>> mkDestDir(destDir)
     >>> pyver = ".".join(map(str, sys.version_info[:2]))
     >>> toLinks = ('drv_libxml2.py', 'libxml2mod.so', 'libxslt.py', 'libxml2.py', 'libxsltmod.so')
     >>> srcDirs = ('/usr/lib/python%s/dist-packages/'%pyver, '/usr/lib/pymodules/python%s/'%pyver, r'/usr/share/pyshared/')
     >>> for toLink in toLinks:
     ...     print 'Trying to link %s' % toLink
     ...     for srcDir in srcDirs:
     ...         path = os.path.join(srcDir, toLink) 
     ...         symlink(path, destDir)
